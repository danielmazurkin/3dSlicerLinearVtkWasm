import createWebWorkerPromise from '../core/createWebWorkerPromise.js';
import InterfaceTypes from '../core/InterfaceTypes.js';
import castImage from '../core/castImage.js';
import config from '../itkConfig.js';
async function readImageArrayBuffer(webWorker, arrayBuffer, fileName, options) {
    let worker = webWorker;
    const { webworkerPromise, worker: usedWorker } = await createWebWorkerPromise(worker);
    worker = usedWorker;
    const filePath = `./${fileName}`;
    const args = [filePath, '0', '--memory-io', '--quiet'];
    const outputs = [
        { type: InterfaceTypes.Image }
    ];
    const inputs = [
        { type: InterfaceTypes.BinaryFile, data: { path: filePath, data: new Uint8Array(arrayBuffer) } }
    ];
    const transferables = [arrayBuffer];
    let mimeType;
    if (typeof options === 'string') {
        // backwards compatibility
        mimeType = options;
    }
    else if (typeof options === 'object') {
        if (typeof options.mimeType === 'string') {
            mimeType = options.mimeType;
        }
    }
    const result = await webworkerPromise.postMessage({
        operation: 'readImage',
        config: config,
        mimeType,
        fileName,
        pipelinePath: 'read-image',
        args,
        outputs,
        inputs
    }, transferables);
    let image = result.outputs[0].data;
    if (typeof options === 'object' && (typeof options.componentType !== 'undefined' || typeof options.pixelType !== 'undefined')) {
        image = castImage(image, options);
    }
    return { image, webWorker: worker };
}
export default readImageArrayBuffer;
//# sourceMappingURL=readImageArrayBuffer.js.map